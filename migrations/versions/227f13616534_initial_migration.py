"""initial migration.

Revision ID: 227f13616534
Revises:
Create Date: 2020-03-14 06:03:48.969790

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import geoalchemy2
import fwas

# revision identifiers, used by Alembic.
revision = '227f13616534'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute('create extension "uuid-ossp"')
    op.execute('create sequence blacklist_tokens_id_seq')
    op.execute('create sequence users_id_seq')
    op.execute('create sequence alerts_id_seq')
    op.execute('create sequence notifications_id_seq')
    op.execute('create sequence weather_rasters_id_seq')
    op.create_table('blacklist_tokens',
    sa.Column('id', sa.Integer(), server_default=sa.text("nextval('blacklist_tokens_id_seq'::regclass)"), nullable=False),
    sa.Column('token', sa.String(length=500), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('token')
    )
    op.create_table('users',
    sa.Column('id', sa.Integer(), server_default=sa.text("nextval('users_id_seq'::regclass)"), nullable=False),
    sa.Column('username', sa.String(length=50), nullable=True),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('password', sa.String(length=128), nullable=False),
    sa.Column('is_active', sa.Boolean(), server_default=sa.text('true'), nullable=False),
    sa.Column('phone', sa.String(length=12), nullable=True),
    sa.Column('role', postgresql.ENUM('member', 'admin', name='role_code'), server_default=sa.text("'member'"), nullable=False),
    sa.Column('created_at', fwas.models.AwareDateTime(), server_default=sa.text("(now() at time zone 'utc')"), nullable=True),
    sa.Column('updated_at', fwas.models.AwareDateTime(), server_default=sa.text("(now() at time zone 'utc')"), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('username')
    )
    op.create_index(op.f('ix_users_role'), 'users', ['role'], unique=False)
    op.create_table('weather_rasters',
    sa.Column('id', sa.Integer(), server_default=sa.text("nextval('weather_rasters_id_seq'::regclass)"), nullable=False),
    sa.Column('rast', geoalchemy2.types.Raster(), nullable=True),
    sa.Column('filename', sa.String(length=255), nullable=True),
    sa.Column('source', sa.String(length=255), nullable=True),
    sa.Column('forecasted_at', fwas.models.AwareDateTime(), nullable=True),
    sa.Column('forecast_time', fwas.models.AwareDateTime(), nullable=True),
    sa.Column('created_at', fwas.models.AwareDateTime(), server_default=sa.text("(now() at time zone 'utc')"), nullable=True),
    sa.Column('updated_at', fwas.models.AwareDateTime(), server_default=sa.text("(now() at time zone 'utc')"), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('alerts',
    sa.Column('id', sa.Integer(), server_default=sa.text("nextval('alerts_id_seq'::regclass)"), nullable=False),
    sa.Column('uuid', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('latitude', sa.Float(precision=53), nullable=False),
    sa.Column('longitude', sa.Float(precision=53), nullable=False),
    sa.Column('geom', geoalchemy2.types.Geometry(geometry_type='POINT', srid=4326), nullable=True),
    sa.Column('radius', sa.Float(precision=53), nullable=True),
    sa.Column('timezone', sa.String(length=30), nullable=False),
    sa.Column('expires_at', fwas.models.AwareDateTime(), nullable=True),
    sa.Column('temperature_limit', sa.Float(precision=53), nullable=True),
    sa.Column('relative_humidity_limit', sa.Float(precision=53), nullable=True),
    sa.Column('wind_limit', sa.Float(precision=53), nullable=True),
    sa.Column('precipitation_limit', sa.Float(precision=53), nullable=True),
    sa.Column('check_thunderstorms', sa.Boolean(), nullable=True),
    sa.Column('created_at', fwas.models.AwareDateTime(), server_default=sa.text("(now() at time zone 'utc')"), nullable=True),
    sa.Column('updated_at', fwas.models.AwareDateTime(), server_default=sa.text("(now() at time zone 'utc')"), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('uuid')
    )
    op.create_index(op.f('ix_alerts_geom'), 'alerts', ['geom'], unique=False)
    op.create_table('alert_subscribers',
    sa.Column('alert_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['alert_id'], ['alerts.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('alert_id', 'user_id')
    )
    op.create_table('notifications',
    sa.Column('id', sa.Integer(), server_default=sa.text("nextval('notifications_id_seq'::regclass)"), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('alert_id', sa.Integer(), nullable=True),
    sa.Column('message', sa.String(), nullable=True),
    sa.Column('sent_at', fwas.models.AwareDateTime(), nullable=True),
    sa.Column('violates_at', fwas.models.AwareDateTime(), nullable=True),
    sa.Column('violated_on', sa.String(), nullable=True),
    sa.Column('temperature_violated', sa.Boolean(), nullable=True),
    sa.Column('temperature_violated_at', fwas.models.AwareDateTime(), nullable=True),
    sa.Column('temperature_value', sa.Float(precision=53), nullable=True),
    sa.Column('relative_humidity_violated', sa.Boolean(), nullable=True),
    sa.Column('relative_humidity_violated_at', fwas.models.AwareDateTime(), nullable=True),
    sa.Column('relative_humidity_value', sa.Float(precision=53), nullable=True),
    sa.Column('wind_violated', sa.Boolean(), nullable=True),
    sa.Column('wind_violated_at', fwas.models.AwareDateTime(), nullable=True),
    sa.Column('wind_value', sa.Float(precision=53), nullable=True),
    sa.Column('precipitation_violated', sa.Boolean(), nullable=True),
    sa.Column('precipitation_violated_at', fwas.models.AwareDateTime(), nullable=True),
    sa.Column('precipitation_value', sa.Float(precision=53), nullable=True),
    sa.Column('created_at', fwas.models.AwareDateTime(), server_default=sa.text("(now() at time zone 'utc')"), nullable=True),
    sa.Column('updated_at', fwas.models.AwareDateTime(), server_default=sa.text("(now() at time zone 'utc')"), nullable=True),
    sa.ForeignKeyConstraint(['alert_id'], ['alerts.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade():

    op.drop_table('notifications')
    op.drop_table('alert_subscribers')
    op.drop_index(op.f('ix_alerts_geom'), table_name='alerts')
    op.drop_table('alerts')
    op.drop_table('weather_rasters')
    op.drop_index(op.f('ix_users_role'), table_name='users')
    op.drop_table('users')
    op.drop_table('blacklist_tokens')
    # ### end Alembic commands ###
